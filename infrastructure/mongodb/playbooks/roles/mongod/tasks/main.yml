---
# This role deploys the mongod processes and sets up the replication set.
# - name: Create a User `"{{ mongo_user }}" in replication servers`.
#   user:
#     name: "{{ mongodb_user }}"
#     password: "{{ mongodb_password }}"
#   delegate_to: '{{ item }}'
#   with_items: "{{groups.replication_servers}}"
#   # ignore_errors: true

# - name: Create a User `"{{ mongo_user }}" in replication servers`.
#   user:
#     name: "{{ mongodb_user }}"
#     password: "{{ mongodb_password }}"
#   delegate_to: '{{ item }}'
#   with_items: "{{groups.replication_servers}}"
#   # ignore_errors: true


# - name: create data directory for mongodb
#   file:
#     path: "{{ mongodb_datadir_prefix }}/mongo-{{ inventory_hostname }}"
#     state: directory
#     owner: '{{ mongodb_user }}'
#     group: '{{ mongodb_group }}'
#   delegate_to: '{{ item }}'
#   with_items: "{{groups.replication_servers}}"
  # ignore_errors: true

- name: create data directory for mongodb
  file:
    path: "{{ mongodb_datadir_prefix }}/mongo-{{ inventory_hostname }}"
    state: directory
    owner: '{{ mongodb_user }}'
    group: '{{ mongodb_group }}'


# - name: Create the mongodb startup file
#   template:
#     src: mongod.service.j2
#     dest: /etc/systemd/system/mongod-{{ inventory_hostname }}.service
#     mode: 0644
#     seuser: system_u
#   delegate_to: '{{ item }}'
#   with_items: "{{groups.replication_servers}}"
  # ignore_errors: true

- name: create log directory for mongodb
  file:
    path: /var/log/mongo
    state: directory
    owner: '{{ mongodb_user }}'
    group: '{{ mongodb_group }}'
    setype: mongod_log_t
    recurse: true

- name: create log file directory for mongodb
  file:
    path: "/var/log/mongo/mongod-{{ inventory_hostname }}.log"
    state: touch
    owner: '{{ mongodb_user }}'
    group: '{{ mongodb_group }}'

- name: create log directory for mongodb
  file:
    path: /var/log/mongod
    state: directory
    owner: '{{ mongodb_user }}'
    group: '{{ mongodb_group }}'
    setype: mongod_log_t
    recurse: true

- name: Create the mongodb startup file
  template:
    src: mongod.service.j2
    dest: /etc/systemd/system/mongod-{{ inventory_hostname }}.service
    mode: 0644
    seuser: system_u
    owner: '{{ mongodb_user }}'
    group: '{{ mongodb_group }}'
  # ignore_errors: true


# - name: Create the mongodb configuration file
#   template:
#     src: mongod.conf.j2
#     dest: /etc/mongod-{{ inventory_hostname }}.conf
#   delegate_to: '{{ item }}'
#   with_items: "{{groups.replication_servers}}"
#   # ignore_errors: true

- name: Create the mongodb configuration file
  template:
    src: mongod.conf.j2
    owner: '{{ mongodb_user }}'
    group: '{{ mongodb_group }}'
    dest: /etc/mongod-{{ inventory_hostname }}.conf

  # ignore_errors: true


- name: Copy the keyfile for authentication
  copy:
    src: "{{mongodb_key_file_path}}"
    dest: "{{ mongodb_datadir_prefix }}/secret"
    owner: '{{ mongodb_user }}'
    group: '{{ mongodb_group }}'
    mode: 0400
    setype: mongod_var_lib_t

# - name: Start the mongodb service
#   systemd:
#     name: mongod-{{ inventory_hostname }}
#     state: started
#     daemon_reload: yes
#     enabled: yes
#   delegate_to: '{{ item }}'
#   with_items: "{{groups.replication_servers}}"
  # ignore_errors: true

- name: Start the mongodb service
  systemd:
    name: mongod-{{ inventory_hostname }}
    state: started
    daemon_reload: yes
    enabled: yes
    # owner: '{{ mongodb_user }}'
    # group: '{{ mongodb_group }}'

- name: Wait mongo
  wait_for:
    port: "{{ mongod_port }}"
    delay: 5
    timeout: 15

- name: Create the file to initialize the mongod replica set
  template:
    src: mongod_init.js.j2
    dest: /tmp/mongod_init.js
    owner: '{{ mongodb_user }}'
    group: '{{ mongodb_group }}'

- name: Initialize the replication set
  shell: /usr/bin/mongo "127.0.0.1:{{ mongod_port }}/admin" /tmp/mongod_init.js
  ignore_errors: yes

